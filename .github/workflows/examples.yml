name: examples

on:
  push:
    branches: [main]
    paths-ignore:
      - '**/*.md'       # .md files anywhere in the repo
      - '**/LICENSE'    # LICENSE files anywhere in the repo
      - '**/.gitignore' # .gitignore files anywhere in the repo
      
  pull_request:
    branches: [main]
    paths-ignore:
      - '**/*.md'       # .md files anywhere in the repo
      - '**/LICENSE'    # LICENSE files anywhere in the repo
      - '**/.gitignore' # .gitignore files anywhere in the repo
      
  workflow_dispatch:
    
  schedule:
    - cron: '25 12 * * *'   # once a day @ 12:25pm UTC (5:35am PST)

jobs:
  iOS-UIKit:
    name: iOS UIKit
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@main
    
    - name: BluetoothMIDI - Set dependency branch
      run: swift .github/workflows/xcpBranch.swift set -go -p MIDIKit "Examples/iOS UIKit/BluetoothMIDI/BluetoothMIDI.xcodeproj" -branch ${{ github.ref }}
    - name: BluetoothMIDI - Resolve Package Dependencies # needed because sometimes xcodebuild fails otherwise
      run: xcodebuild -project "Examples/iOS UIKit/BluetoothMIDI/BluetoothMIDI.xcodeproj" -resolvePackageDependencies
    - name: BluetoothMIDI - Build
      run: xcodebuild build -project "Examples/iOS UIKit/BluetoothMIDI/BluetoothMIDI.xcodeproj" -scheme "BluetoothMIDI" -destination "platform=iOS Simulator,name=iPhone 12"
    
    - name: EventParsing - Set dependency branch
      run: swift .github/workflows/xcpBranch.swift set -go -p MIDIKit "Examples/iOS UIKit/EventParsing/EventParsing.xcodeproj" -branch ${{ github.ref }}
    - name: EventParsing - Resolve Package Dependencies # needed because sometimes xcodebuild fails otherwise
      run: xcodebuild -project "Examples/iOS UIKit/EventParsing/EventParsing.xcodeproj" -resolvePackageDependencies
    - name: EventParsing - Build
      run: xcodebuild build -project "Examples/iOS UIKit/EventParsing/EventParsing.xcodeproj" -scheme "EventParsing" -destination "platform=iOS Simulator,name=iPhone 12"

    - name: VirtualInput - Set dependency branch
      run: swift .github/workflows/xcpBranch.swift set -go -p MIDIKit "Examples/iOS UIKit/VirtualInput/VirtualInput.xcodeproj" -branch ${{ github.ref }}
    - name: VirtualInput - Resolve Package Dependencies # needed because sometimes xcodebuild fails otherwise
      run: xcodebuild -project "Examples/iOS UIKit/VirtualInput/VirtualInput.xcodeproj" -resolvePackageDependencies
    - name: VirtualInput - Build
      run: xcodebuild build -project "Examples/iOS UIKit/VirtualInput/VirtualInput.xcodeproj" -scheme "VirtualInput" -destination "platform=iOS Simulator,name=iPhone 12"

    - name: VirtualOutput - Set dependency branch
      run: swift .github/workflows/xcpBranch.swift set -go -p MIDIKit "Examples/iOS UIKit/VirtualOutput/VirtualOutput.xcodeproj" -branch ${{ github.ref }}
    - name: VirtualOutput - Resolve Package Dependencies # needed because sometimes xcodebuild fails otherwise
      run: xcodebuild -project "Examples/iOS UIKit/VirtualOutput/VirtualOutput.xcodeproj" -resolvePackageDependencies
    - name: VirtualOutput - Build
      run: xcodebuild build -project "Examples/iOS UIKit/VirtualOutput/VirtualOutput.xcodeproj" -scheme "VirtualOutput" -destination "platform=iOS Simulator,name=iPhone 12"

  iOS-SwiftUI:
    name: iOS SwiftUI
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@main
    
    - name: BluetoothMIDI - Set dependency branch
      run: swift .github/workflows/xcpBranch.swift set -go -p MIDIKit "Examples/iOS SwiftUI/BluetoothMIDI/BluetoothMIDI.xcodeproj" -branch ${{ github.ref }}
    - name: BluetoothMIDI - Resolve Package Dependencies # needed because sometimes xcodebuild fails otherwise
      run: xcodebuild -project "Examples/iOS SwiftUI/BluetoothMIDI/BluetoothMIDI.xcodeproj" -resolvePackageDependencies
    - name: BluetoothMIDI - Build
      run: xcodebuild build -project "Examples/iOS SwiftUI/BluetoothMIDI/BluetoothMIDI.xcodeproj" -scheme "BluetoothMIDI" -destination "platform=iOS Simulator,name=iPhone 12"

    - name: EndpointPickers - Set dependency branch
      run: swift .github/workflows/xcpBranch.swift set -go -p MIDIKit "Examples/iOS SwiftUI/EndpointPickers/EndpointPickers.xcodeproj" -branch ${{ github.ref }}
    - name: EndpointPickers - Resolve Package Dependencies # needed because sometimes xcodebuild fails otherwise
      run: xcodebuild -project "Examples/iOS SwiftUI/EndpointPickers/EndpointPickers.xcodeproj" -resolvePackageDependencies
    - name: EndpointPickers - Build
      run: xcodebuild build -project "Examples/iOS SwiftUI/EndpointPickers/EndpointPickers.xcodeproj" -scheme "EndpointPickers" -destination "platform=iOS Simulator,name=iPhone 12"

    - name: EventParsing - Set dependency branch
      run: swift .github/workflows/xcpBranch.swift set -go -p MIDIKit "Examples/iOS SwiftUI/EventParsing/EventParsing.xcodeproj" -branch ${{ github.ref }}
    - name: EventParsing - Resolve Package Dependencies # needed because sometimes xcodebuild fails otherwise
      run: xcodebuild -project "Examples/iOS SwiftUI/EventParsing/EventParsing.xcodeproj" -resolvePackageDependencies
    - name: EventParsing - Build
      run: xcodebuild build -project "Examples/iOS SwiftUI/EventParsing/EventParsing.xcodeproj" -scheme "EventParsing" -destination "platform=iOS Simulator,name=iPhone 12"
      
    - name: USB iOS to Mac - Set dependency branch
      run: swift .github/workflows/xcpBranch.swift set -go -p MIDIKit "Examples/iOS SwiftUI/USB iOS to Mac/USB iOS to Mac.xcodeproj" -branch ${{ github.ref }}
    - name: USB iOS to Mac - Resolve Package Dependencies # needed because sometimes xcodebuild fails otherwise
      run: xcodebuild -project "Examples/iOS SwiftUI/USB iOS to Mac/USB iOS to Mac.xcodeproj" -resolvePackageDependencies
    - name: USB iOS to Mac - Build
      run: xcodebuild build -project "Examples/iOS SwiftUI/USB iOS to Mac/USB iOS to Mac.xcodeproj" -scheme "USB iOS to Mac" -destination "platform=iOS Simulator,name=iPhone 12"

    - name: VirtualInput - Set dependency branch
      run: swift .github/workflows/xcpBranch.swift set -go -p MIDIKit "Examples/iOS SwiftUI/VirtualInput/VirtualInput.xcodeproj" -branch ${{ github.ref }}
    - name: VirtualInput - Resolve Package Dependencies # needed because sometimes xcodebuild fails otherwise
      run: xcodebuild -project "Examples/iOS SwiftUI/VirtualInput/VirtualInput.xcodeproj" -resolvePackageDependencies
    - name: VirtualInput - Build
      run: xcodebuild build -project "Examples/iOS SwiftUI/VirtualInput/VirtualInput.xcodeproj" -scheme "VirtualInput" -destination "platform=iOS Simulator,name=iPhone 12"

    - name: VirtualOutput - Set dependency branch
      run: swift .github/workflows/xcpBranch.swift set -go -p MIDIKit "Examples/iOS SwiftUI/VirtualOutput/VirtualOutput.xcodeproj" -branch ${{ github.ref }}
    - name: VirtualOutput - Resolve Package Dependencies # needed because sometimes xcodebuild fails otherwise
      run: xcodebuild -project "Examples/iOS SwiftUI/VirtualOutput/VirtualOutput.xcodeproj" -resolvePackageDependencies
    - name: VirtualOutput - Build
      run: xcodebuild build -project "Examples/iOS SwiftUI/VirtualOutput/VirtualOutput.xcodeproj" -scheme "VirtualOutput" -destination "platform=iOS Simulator,name=iPhone 12"

  macOS-AppKit:
    name: macOS AppKit
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@main
    
    - name: EndpointMenus - Set dependency branch
      run: swift .github/workflows/xcpBranch.swift set -go -p MIDIKit "Examples/macOS AppKit/EndpointMenus/EndpointMenus.xcodeproj" -branch ${{ github.ref }}
    - name: EndpointMenus - Resolve Package Dependencies # needed because sometimes xcodebuild fails otherwise
      run: xcodebuild -project "Examples/macOS AppKit/EndpointMenus/EndpointMenus.xcodeproj" -resolvePackageDependencies
    - name: EndpointMenus - Build
      run: xcodebuild build -project "Examples/macOS AppKit/EndpointMenus/EndpointMenus.xcodeproj" -scheme "EndpointMenus" -destination "generic/platform=macOS,name=Any Mac"

    - name: EventParsing - Set dependency branch
      run: swift .github/workflows/xcpBranch.swift set -go -p MIDIKit "Examples/macOS AppKit/EventParsing/EventParsing.xcodeproj" -branch ${{ github.ref }}
    - name: EventParsing - Resolve Package Dependencies # needed because sometimes xcodebuild fails otherwise
      run: xcodebuild -project "Examples/macOS AppKit/EventParsing/EventParsing.xcodeproj" -resolvePackageDependencies
    - name: EventParsing - Build
      run: xcodebuild build -project "Examples/macOS AppKit/EventParsing/EventParsing.xcodeproj" -scheme "EventParsing" -destination "generic/platform=macOS,name=Any Mac"

    - name: VirtualInput - Set dependency branch
      run: swift .github/workflows/xcpBranch.swift set -go -p MIDIKit "Examples/macOS AppKit/VirtualInput/VirtualInput.xcodeproj" -branch ${{ github.ref }}
    - name: VirtualInput - Resolve Package Dependencies # needed because sometimes xcodebuild fails otherwise
      run: xcodebuild -project "Examples/macOS AppKit/VirtualInput/VirtualInput.xcodeproj" -resolvePackageDependencies
    - name: VirtualInput - Build
      run: xcodebuild build -project "Examples/macOS AppKit/VirtualInput/VirtualInput.xcodeproj" -scheme "VirtualInput" -destination "generic/platform=macOS,name=Any Mac"

    - name: VirtualOutput - Set dependency branch
      run: swift .github/workflows/xcpBranch.swift set -go -p MIDIKit "Examples/macOS AppKit/VirtualOutput/VirtualOutput.xcodeproj" -branch ${{ github.ref }}
    - name: VirtualOutput - Resolve Package Dependencies # needed because sometimes xcodebuild fails otherwise
      run: xcodebuild -project "Examples/macOS AppKit/VirtualOutput/VirtualOutput.xcodeproj" -resolvePackageDependencies
    - name: VirtualOutput - Build
      run: xcodebuild build -project "Examples/macOS AppKit/VirtualOutput/VirtualOutput.xcodeproj" -scheme "VirtualOutput" -destination "generic/platform=macOS,name=Any Mac"

  macOS-SwiftUI:
    name: macOS SwiftUI
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@main
    
    - name: EndpointPickers - Set dependency branch
      run: swift .github/workflows/xcpBranch.swift set -go -p MIDIKit "Examples/macOS SwiftUI/EndpointPickers/EndpointPickers.xcodeproj" -branch ${{ github.ref }}
    - name: EndpointPickers - Resolve Package Dependencies # needed because sometimes xcodebuild fails otherwise
      run: xcodebuild -project "Examples/macOS SwiftUI/EndpointPickers/EndpointPickers.xcodeproj" -resolvePackageDependencies
    - name: EndpointPickers - Build
      run: xcodebuild build -project "Examples/macOS SwiftUI/EndpointPickers/EndpointPickers.xcodeproj" -scheme "EndpointPickers" -destination "generic/platform=macOS,name=Any Mac"

    - name: EventParsing - Set dependency branch
      run: swift .github/workflows/xcpBranch.swift set -go -p MIDIKit "Examples/macOS SwiftUI/EventParsing/EventParsing.xcodeproj" -branch ${{ github.ref }}
    - name: EventParsing - Resolve Package Dependencies # needed because sometimes xcodebuild fails otherwise
      run: xcodebuild -project "Examples/macOS SwiftUI/EventParsing/EventParsing.xcodeproj" -resolvePackageDependencies
    - name: EventParsing - Build
      run: xcodebuild build -project "Examples/macOS SwiftUI/EventParsing/EventParsing.xcodeproj" -scheme "EventParsing" -destination "generic/platform=macOS,name=Any Mac"

    - name: VirtualInput - Set dependency branch
      run: swift .github/workflows/xcpBranch.swift set -go -p MIDIKit "Examples/macOS SwiftUI/VirtualInput/VirtualInput.xcodeproj" -branch ${{ github.ref }}
    - name: VirtualInput - Resolve Package Dependencies # needed because sometimes xcodebuild fails otherwise
      run: xcodebuild -project "Examples/macOS SwiftUI/VirtualInput/VirtualInput.xcodeproj" -resolvePackageDependencies
    - name: VirtualInput - Build
      run: xcodebuild build -project "Examples/macOS SwiftUI/VirtualInput/VirtualInput.xcodeproj" -scheme "VirtualInput" -destination "generic/platform=macOS,name=Any Mac"

    - name: VirtualOutput - Set dependency branch
      run: swift .github/workflows/xcpBranch.swift set -go -p MIDIKit "Examples/macOS SwiftUI/VirtualOutput/VirtualOutput.xcodeproj" -branch ${{ github.ref }}
    - name: VirtualOutput - Resolve Package Dependencies # needed because sometimes xcodebuild fails otherwise
      run: xcodebuild -project "Examples/macOS SwiftUI/VirtualOutput/VirtualOutput.xcodeproj" -resolvePackageDependencies
    - name: VirtualOutput - Build
      run: xcodebuild build -project "Examples/macOS SwiftUI/VirtualOutput/VirtualOutput.xcodeproj" -scheme "VirtualOutput" -destination "generic/platform=macOS,name=Any Mac"

  Advanced:
    name: Advanced
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@main
    
    - name: HUITest - Set dependency branch
      run: swift .github/workflows/xcpBranch.swift set -go -p MIDIKit "Examples/Advanced/HUITest/HUITest.xcodeproj" -branch ${{ github.ref }}
    - name: HUITest - Resolve Package Dependencies # needed because sometimes xcodebuild fails otherwise
      run: xcodebuild -project "Examples/Advanced/HUITest/HUITest.xcodeproj" -resolvePackageDependencies
    - name: HUITest - Build
      run: xcodebuild build -project "Examples/Advanced/HUITest/HUITest.xcodeproj" -scheme "HUITest" -destination "generic/platform=macOS,name=Any Mac"
    
    - name: MIDIEventLogger - Set dependency branch
      run: swift .github/workflows/xcpBranch.swift set -go -p MIDIKit "Examples/Advanced/MIDIEventLogger/MIDIEventLogger.xcodeproj" -branch ${{ github.ref }}
    - name: MIDIEventLogger - Resolve Package Dependencies # needed because sometimes xcodebuild fails otherwise
      run: xcodebuild -project "Examples/Advanced/MIDIEventLogger/MIDIEventLogger.xcodeproj" -resolvePackageDependencies
    - name: MIDIEventLogger - Build
      run: xcodebuild build -project "Examples/Advanced/MIDIEventLogger/MIDIEventLogger.xcodeproj" -scheme "MIDIEventLogger" -destination "generic/platform=macOS,name=Any Mac"
      
    - name: MIDISystemInfo - Set dependency branch
      run: swift .github/workflows/xcpBranch.swift set -go -p MIDIKit "Examples/Advanced/MIDISystemInfo/MIDISystemInfo.xcodeproj" -branch ${{ github.ref }}
    - name: MIDISystemInfo - Resolve Package Dependencies # needed because sometimes xcodebuild fails otherwise
      run: xcodebuild -project "Examples/Advanced/MIDISystemInfo/MIDISystemInfo.xcodeproj" -resolvePackageDependencies
    - name: MIDISystemInfo - Build
      run: xcodebuild build -project "Examples/Advanced/MIDISystemInfo/MIDISystemInfo.xcodeproj" -scheme "MIDISystemInfo" -destination "generic/platform=macOS,name=Any Mac"
      
    - name: MTCExample - Set dependency branch
      run: swift .github/workflows/xcpBranch.swift set -go -p MIDIKit "Examples/Advanced/MTCExample/MTCExample.xcodeproj" -branch ${{ github.ref }}
    - name: MTCExample - Resolve Package Dependencies # needed because sometimes xcodebuild fails otherwise
      run: xcodebuild -project "Examples/Advanced/MTCExample/MTCExample.xcodeproj" -resolvePackageDependencies
    - name: MTCExample - Build
      run: xcodebuild build -project "Examples/Advanced/MTCExample/MTCExample.xcodeproj" -scheme "MTCExample" -destination "generic/platform=macOS,name=Any Mac"
