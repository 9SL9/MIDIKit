//
//  ThruConnection Parameters.swift
//  MIDIKit â€¢ https://github.com/orchetect/MIDIKit
//

@_implementationOnly import CoreMIDI

extension MIDI.IO.ThruConnection {
    
    /// Parameters for a MIDI Thru connection.
    public struct Parameters {
        
        public var inputs: [MIDI.IO.CoreMIDIEndpointRef] = []
        public var outputs: [MIDI.IO.CoreMIDIEndpointRef] = []
        
        public var filterOutAllControls: Bool = false
        public var filterOutBeatClock: Bool = false
        public var filterOutMTC: Bool = false
        public var filterOutSysEx: Bool = false
        public var filterOutTuneRequest: Bool = false
        
        public init() { }
        
    }
    
}

extension MIDI.IO.ThruConnection.Parameters {
    
    /// Builds Core MIDI `MIDIThruConnectionParams` from local properties.
    internal func coreMIDIThruConnectionParams() -> MIDIThruConnectionParams {
        
        var params = MIDIThruConnectionParams()
        
        MIDIThruConnectionParamsInitialize(&params) // fill with defaults
        
        // MIDIThruConnectionParams Properties:
        //  .outputs
        //      MIDIThruConnectionEndpoint tuple (initial size: 8). All MIDI generated by these outputs is
        //      routed into this connection for processing and distribution to inputs.
        //  .numSources
        //      The number of valid outputs in the .outputs tuple.
        //  .inputs
        //      MIDIThruConnectionEndpoint tuple (initial size: 8). All MIDI output from the connection is
        //      routed to these inputs.
        //  .numDestinations
        //      The number of valid outputs in the .inputs tuple.
        //  (many more properties available including filters)
        
        // Source(s) and destination(s).
        
        // These expect tuples, so we have to perform some weirdness.
        // Rather than initialize MIDIThruConnectionEndpoint objects,
        // just access the .endpointRef property.
        // All 8 are pre-initialized MIDIThruConnectionEndpoint objects.
        
        // outputs
        
        params.numSources = UInt32(outputs.count)
        
        for srcEP in 0..<outputs.count {
            switch srcEP {
            case 0: params.sources.0.endpointRef = outputs[0]
            case 1: params.sources.1.endpointRef = outputs[1]
            case 2: params.sources.2.endpointRef = outputs[2]
            case 3: params.sources.3.endpointRef = outputs[3]
            case 4: params.sources.4.endpointRef = outputs[4]
            case 5: params.sources.5.endpointRef = outputs[5]
            case 6: params.sources.6.endpointRef = outputs[6]
            case 7: params.sources.7.endpointRef = outputs[7]
            default: break // ignore more than 8 endpoints
            }
        }
        
        // inputs
        
        params.numDestinations = UInt32(inputs.count)
        
        for destEP in 0..<inputs.count {
            switch destEP {
            case 0: params.destinations.0.endpointRef = inputs[0]
            case 1: params.destinations.1.endpointRef = inputs[1]
            case 2: params.destinations.2.endpointRef = inputs[2]
            case 3: params.destinations.3.endpointRef = inputs[3]
            case 4: params.destinations.4.endpointRef = inputs[4]
            case 5: params.destinations.5.endpointRef = inputs[5]
            case 6: params.destinations.6.endpointRef = inputs[6]
            case 7: params.destinations.7.endpointRef = inputs[7]
            default: break // ignore more than 8 endpoints
            }
        }
        
        // properties
        
        // 0 or 1
        params.filterOutAllControls = filterOutAllControls ? 1 : 0
        
        // 0 or 1
        params.filterOutBeatClock = filterOutBeatClock ? 1 : 0
        
        // 0 or 1
        params.filterOutMTC = filterOutMTC ? 1 : 0
        
        // 0 or 1
        params.filterOutSysEx = filterOutSysEx ? 1 : 0
        
        // 0 or 1
        params.filterOutTuneRequest = filterOutTuneRequest ? 1 : 0
        
        return params
        
    }
    
}
